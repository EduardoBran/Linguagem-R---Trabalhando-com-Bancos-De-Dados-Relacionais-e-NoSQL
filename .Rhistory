m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/6.Trabalhando-com-Bancos-de-Dados-Relacionais-e-NoSQL-em-R")
getwd()
gc()
install.packages('RMySQL')
install.packages("ggplot2")
install.packages('dbplyr')    # pacote que contém drive necessário para conectar em banco de dados relacionais
library(RMySQL)
library(ggplot2)
library(dbplyr)
library(dplyr)
con = dbConnect(MySQL(), user = 'root', password = '', dbname = 'titanicDB', host = "localhost")
class(con)
qry <- "select pclass, survived, avg(age) as media_idade from titanic where survived = 1 group by pclass, survived;"
dbGetQuery(con, qry)
dados <- dbGetQuery(con, qry)
ggplot(dados, aes(pclass, media_idade)) +
geom_bar(stat = "identity")
con2 <- src_mysql(dbname = "titanicdb", user = 'root', password = '', host = 'localhost')
con_tbl <- tbl(con, "titanic")
con = dbConnect(MySQL(), user = 'root', password = '', dbname = 'titanicDB', host = "localhost")
con2 <- tbl(dbname = "titanicdb", user = 'root', password = '', host = 'localhost')
con2 <- tbl(con, "titanic")
con3 <- tbl(con, "titanic")
con2 <- src_mysql(dbname = "titanicdb", user = 'root', password = '', host = 'localhost')
dados2 <- con3 %>%
tbl("titanic") %>%
select(pclass, sex, age, survived, fare) %>%
filter(survived == 0) %>%
collect()
dados2 <- con3 %>%
select(pclass, sex, age, survived, fare) %>%
filter(survived == 0) %>%
collect()
View(dados2)
dados3 <- con3 %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
View(dados3)
head(dados2)
head(dados3)
head(dados2)
con2 <- src_mysql(dbname = "titanicdb", user = 'root', password = '', host = 'localhost') # a funcao src_mysql está
dados2 <- con %>%
select(pclass, sex, age, survived, fare) %>%
filter(survived == 0) %>%
collect()
con = dbConnect(MySQL(), user = 'root', password = '', dbname = 'titanicDB', host = "localhost")
con3 <- tbl(con, "titanic")
dados2 <- con %>%
select(pclass, sex, age, survived, fare) %>%
filter(survived == 0) %>%
collect()
dados2 <- con3 %>%
select(pclass, sex, age, survived, fare) %>%
filter(survived == 0) %>%
collect()
dados3 <- con3 %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
dados3 <- con3 %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
head()
dados3
View(dados3)
dados3 <- as.data.frame(dados3)
View(dados3)
dados3 <- con3 %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
View(dados3)
View(dados3)
View(dados2)
qry <- "select pclass, survived, avg(age) as media_idade from titanic where survived = 1 group by pclass, survived;"
dados <- dbGetQuery(con, qry)
View(dados)
dados_dbplyr <- con3 %>%
select(pclass, survived, age) %>%
group_by(pclass, survived) %>%
summarise(media = mean(age, na.rm = TRUE)) %>%
collect()
View(dados_dbplyr)
View(dados3)
View(dados_dbplyr)
dados3_dbplyr <- con3 %>%
select(pclass, survived, age) %>%
group_by(pclass, survived) %>%
summarise(media = mean(age, na.rm = TRUE)) %>%
collect()
View(dados)
dados_dbplyr <- con3 %>%
select(pclass, survived, age) %>%
group_by(pclass, survived) %>%
summarise(media = mean(age, na.rm = TRUE)) %>%
collect()
View(dados_dbplyr)
View(dados)
View(dados_dbplyr)
con = dbConnect(MySQL(), user = 'root', password = '', dbname = 'titanicDB', host = "localhost")
qry <- "select pclass, survived, avg(age) as media_idade from titanic where survived = 1 group by pclass, survived;"
dados <- dbGetQuery(con, qry)
View(dados)
dados_dbplyr <- con3 %>%
select(pclass, survived, age) %>%
filter(survived == 1) %>%
group_by(pclass, survived) %>%
summarise(media_idade = mean(age, na.rm = TRUE)) %>%
collect()
con3 <- tbl(con, "titanic")
dados_dbplyr <- con3 %>%
select(pclass, survived, age) %>%
filter(survived == 1) %>%
group_by(pclass, survived) %>%
summarise(media_idade = mean(age, na.rm = TRUE)) %>%
collect()
View(dados_dbplyr)
View(dados)
dados_dbplyr <- con3 %>%
select(pclass, survived, age) %>%
filter(survived == 0) %>%
group_by(pclass, survived) %>%
summarise(media_idade = mean(age, na.rm = TRUE)) %>%
collect()
View(dados_dbplyr)
dados_dbplyr <- con3 %>%
select(pclass, survived, age) %>%
filter(survived == 1) %>%
group_by(pclass, survived) %>%
summarise(media_idade = mean(age, na.rm = TRUE)) %>%
collect()
View(titanic)
View(titanicdb)
dados2 <- con3 %>%
select(pclass, sex, age, survived, fare) %>%
filter(survived == 0) %>%
collect()
dados3 <- con3 %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
View(dados3)
dados_dbplyr <- con3 %>%
select(pclass, survived, age) %>%
filter(survived == 1) %>%
group_by(pclass, survived) %>%
summarise(media_idade = avg(age,)) %>%
collect()
dados_dbplyr <- con3 %>%
select(pclass, survived, age) %>%
filter(survived == 1) %>%
group_by(pclass, survived) %>%
summarise(media_idade = avg(age)) %>%
collect()
View(dados_dbplyr)
dados4 <- con2 %>%
tbl("titanic") %>%
filter(fare > 150) %>%
select(pclass,sex,age,fare) %>%
group_by(pclass,sex) %>%
summarise(avg_age = avg(age),
avg_fare = avg(fare))
dados4 <- con3 %>%
tbl("titanic") %>%
filter(fare > 150) %>%
select(pclass,sex,age,fare) %>%
group_by(pclass,sex) %>%
summarise(avg_age = avg(age),
avg_fare = avg(fare))
dados4 <- con3 %>%
filter(fare > 150) %>%
select(pclass,sex,age,fare) %>%
group_by(pclass,sex) %>%
summarise(avg_age = avg(age),
avg_fare = avg(fare))
View(dados4)
dados4 <- con3 %>%
select(pclass,sex,age,fare) %>%
filter(fare > 150) %>%
group_by(pclass,sex) %>%
summarise(avg_age = avg(age),
avg_fare = avg(fare))
dados4 <- as.data.frame(dados4)
View(dados4)
ggplot(dados3, aes(pclass, survival_ratio, color = sex, group = sex)) +
geom_point(size = 3) +
geom_line()
ggplot(dados3, aes(pclass, survival_ratio, color = sex)) +
geom_point(size = 3) +
geom_line()
ggplot(dados3, aes(pclass, survival_ratio, color = sex, group = sex)) +
geom_point(size = 3) +
geom_line()
ggplot(dados4, aes(pclass, survival_ratio, color = sex, group = sex)) +
geom_point(size = 3) +
geom_line()
ggplot(dados4, aes(pclass, age, color = sex, group = sex)) +
geom_point(size = 3) +
geom_line()
ggplot(dados4, aes(pclass, fare, color = sex, group = sex)) +
geom_point(size = 3) +
geom_line()
library(ggplot2)
ggplot(dados4, aes(x = avg_age, y = avg_fare, color = sex)) +
geom_point(size = 3) +
facet_wrap(~pclass)
ggplot(dados4, aes(x = avg_age, y = avg_fare, color = sex)) +
geom_point(size = 3) +
geom_line()
ggplot(dados4, aes(x = avg_age, y = avg_fare, color = sex)) +
geom_point(size = 3) +
facet_wrap(~pclass)
gc()
# Instalando e carregando pacotes
install.packages('RSQLite')
library(RSQLite)
drv = dbDriver("SQLite")
con = dbConnect(drv, dbname = 'exemplo.db')
dbListTables(con)
