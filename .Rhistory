# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R/Exercicios")
getwd()
arquivo_json <- fromJSON(file = 'input.json')
library(rjson)
arquivo_json <- fromJSON(file = 'input.json')
arquivo_json
df_aqruivo_json <- as.data.frame(arquivo_json)
df_aqruivo_json
df_json <- data.frame(arquivo_json)
df_json
# forma 2
ncol(df_input)
df_input <- read_csv("input.csv")
# forma 1
dim(df_input)
library(dplyr)
df_input <- read_csv("input.csv")
library(dplyr)
df_input <- read_csv("input.csv")
df_input <- read.csv("input.csv")
# forma 1
dim(df_input)
# forma 2
ncol(df_input)
nrow(df_input)
# forma 3
subset(df_input, salary == max(salary))
# forma 2
df_input %>% filter(salary == max(salary))
# forma 1
df_input[df_input$salary == max(df_input$salary), ]
# forma 1
df_input[df_input$dept == "IT", ]
# forma 2
df_input %>% filter(dept == "IT")
# forma 3
subset(df_input, dept == "IT")
# forma 3
subset(df_input, dept == "IT" & salary > 600)
# forma 1
df_input[df_input$dept == 'IT' & df_input$salary > 600, ]
# forma 2
df_input %>% filter(dept == "IT") %>% filter(salary > 600)
# forma 3
subset(df_input, dept == "IT" & salary > 600)
library(dplyr)         # pacote para processar dados
library(arules)        # pacote com algoritimo para Market Basket Analysis
library(arulesViz)     # pacote para visualização das regras de associações criados com pacote acima
library(htmlwidgets)   # pacote para gerar os graficos do arulesViz
library(writexl)       # pacote para gerar e gravar os arquivos em Excel
options(warn=-1)       # filtra tipos de warning (para não poluir o console)
# Definindo o número de linhas e colunas do dataframe
num_linhas <- 50
num_colunas <- 10
# Criando um dataframe com valores NA aleatórios
set.seed(123)
dados <- matrix(sample(c(NA, runif(100, 0, 10)), num_linhas*num_colunas, replace=TRUE, prob=c(0.7, 0.3)), nrow=num_linhas)
# Definindo o número de linhas e colunas do dataframe
num_linhas <- 50
num_colunas <- 10
# Criando um dataframe com valores NA aleatórios
set.seed(123)
dados <- matrix(sample(c(NA, runif(100, 0, 10)), num_linhas*num_colunas, replace=TRUE, prob=c(0.7, 0.3)), nrow=num_linhas)
# Definindo o número de linhas e colunas do dataframe
num_linhas <- 50
num_colunas <- 10
# Criando um dataframe com valores NA aleatórios
set.seed(123)
dados <- matrix(sample(c(NA, runif(100, 0, 10)), num_linhas*num_colunas, replace=TRUE, prob=c(0.7, 0.3)), nrow=num_linhas)
# Corrigindo o vetor de probabilidades
prob <- c(rep(0.7, num_linhas*num_colunas/2), rep(0.3, num_linhas*num_colunas/2))
# Amostrando valores aleatórios e NA
set.seed(123)
dados <- matrix(sample(c(NA, runif(100, 0, 10)), num_linhas*num_colunas, replace=TRUE, prob=prob), nrow=num_linhas)
# Nomeando as colunas
nomes_colunas <- paste0("Coluna ", 1:num_colunas)
colnames(dados) <- nomes_colunas
# Criando um novo dataframe com 20 clientes e 15 produtos
set.seed(123)
compras <- matrix(sample(c(0, 1), 20*15, replace=TRUE, prob=c(0.8, 0.2)), nrow=20)
# Nomeando as linhas com o nome dos clientes
clientes <- paste0("Cliente ", 1:20)
rownames(compras) <- clientes
# Lista de nomes de produtos
nomes_produtos <- c("Arroz", "Feijão", "Macarrão", "Leite", "Queijo", "Presunto", "Manteiga", "Pão", "Biscoito", "Café", "Açúcar", "Sal", "Óleo", "Farinha", "Bolacha")
# Nomeando as colunas com nomes de produtos existentes
colnames(compras) <- sample(nomes_produtos, 15)
View(compras)
# Visualizando o dataframe criado
compras <- as.data.frame(compras)
View(compras)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Projeto-Data-Science-no-Varejo-com-Market-Basket-Analysis")
getwd()
clientes
transacoes <- as(compras, "transactions")
regras <- apriori(transacoes, parameter = list(support = 0.3, confidence = 0.7))
inspect(regras)
gc()
library(dplyr)         # pacote para processar dados
library(arules)        # pacote com algoritimo para Market Basket Analysis
library(arulesViz)     # pacote para visualização das regras de associações criados com pacote acima
library(htmlwidgets)   # pacote para gerar os graficos do arulesViz
library(writexl)       # pacote para gerar e gravar os arquivos em Excel
options(warn=-1)       # filtra tipos de warning (para não poluir o console)
set.seed(123)
compras <- matrix(sample(c(0, 1), 20*15, replace=TRUE, prob=c(0.8, 0.2)), nrow=20)
# Nomeando as linhas com o nome dos clientes
clientes <- paste0("Cliente ", 1:20)
rownames(compras) <- clientes
# Lista de nomes de produtos
nomes_produtos <- c("Arroz", "Feijão", "Macarrão", "Leite", "Queijo", "Presunto", "Manteiga", "Pão", "Biscoito", "Café", "Açúcar", "Sal", "Óleo", "Farinha", "Bolacha")
# Nomeando as colunas com nomes de produtos existentes
colnames(compras) <- sample(nomes_produtos, 15)
# Visualizando o dataframe criado
compras <- as.data.frame(compras)
library(arules)
transacoes <- as(compras, "transactions")
regras <- apriori(transacoes, parameter = list(support = 0.3, confidence = 0.7))
regras_produto1 <- apriori(transacoes,
parameter = list(conf = 0.5, minlen = 3),
appearance = list(default = "lhs", rhs = "Arroz"))
inspect(head(regras))
inspect(head(sort(regras, by = 'confidence'), 5))
regras_leite <- subset(regras, rhs %in% "Leite")
regras_leite <- subset(regras, rhs %in% "Arroz")
colnames(transacoes)
View(compras)
regras_leite <- subset(regras, rhs %in% "Leite=[1]")
regras_leite <- subset(regras, rhs %in% "Leite=[0,1]")
inspect(head(sort(regras_leite, by = 'confidence'), 5))
regras_leite <- subset(regras, rhs %in% "Leite=[0,1]")
inspect(sort(regras_leite, by = 'confidence'), 5))
inspect(sort(regras_leite, by = 'confidence'), 5)
instpect(regras_leite)
regras_leite <- subset(regras, rhs %in% "Leite=[0,1]")
inspect(regras_leite)
inspect(head(regras_leite))
gc()
# Configurando Diretório de Trabalho
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/6.Trabalhando-com-Bancos-de-Dados-Relacionais-e-NoSQL-em-R")
getwd()
install.packages('RMySQL')
library(RMySQL)
library(ggplot2)
library(plyr)
con = dbConnect(MySQL(), user = 'root', password = '', dbname = 'titanicDB', host = "localhost")
con
# install.packages('RMySQL')
install.packages('dbplyr')
library(dbplyr)
con = dbConnect(MySQL(), user = 'root', password = '', dbname = 'titanicDB', host = "localhost")
# Conexão com o Banco de Dados
?dbConnect
con2 = dbConnect(MySQL(), user = 'root', password = '', dbname = 'titaniccDB', host = "localhost")
con2 = dbConnect(MySQL(), user = 'root', password = 'adsdas', dbname = 'titanicDB', host = "localhost")
qry <- "select pclass, survived, avg(age) as media_idade from titanic where survived = 1 group by pclass, survived;"
dbGetQuery(con, qry)
dados <- dbGetQuery(con, qry)
head(dados)
class(dados)
ggplot(dados, aes(pclass, media_idade)) +
geom_bar(stat = "identity")
View(dados)
con2 <- src_mysql(dbname = "titanicdb", user = 'root', password = '', host = 'localhost')
con2
dados2 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, age, survived, fare) %>%
filter(survived == 0) %>%
collect()
View(dados2)
View(dados2)
View(dados)
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
library(dplyr)
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = AVG(survived)) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = mean(survived)) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = mean(survived)) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
dados2 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
dados2 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, age, survived, fare) %>%
filter(survived == 0) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio == 1) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = avg(survived)) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(survival_ratio = mean(survived)) %>%
collect()
con2 %>%
tbl("titanic") %>%
show_columns()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(avg_age = avg(survived),
avg_fare = avg(fare)) %>%
collect()
dados3 <- con2 %>%
tbl("titanic") %>%
select(pclass, sex, survived) %>%
group_by(pclass, sex) %>%
summarise(avg_age = avg(survived),
avg_fare = avg(fare))
